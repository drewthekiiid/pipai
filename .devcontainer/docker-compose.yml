services:
  # Main development container
  devcontainer:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - ../:/workspace:cached
      - node_modules:/workspace/node_modules
      - venv:/workspace/apps/api/venv
    working_dir: /workspace
    command: sleep infinity
    network_mode: service:app
    depends_on:
      - postgres
      - redis
      - temporal

  # Next.js Frontend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ../:/workspace:cached
      - node_modules:/workspace/node_modules
    working_dir: /workspace
    command: sleep infinity
    ports:
      - "3000:3000"
      - "3001:3001"
      - "8000:8000"  # FastAPI backend
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      - postgres
      - redis
      - temporal

  # PostgreSQL Database (for Temporal & app data)
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: pipai
      POSTGRES_PASSWORD: pipai_dev_password
      POSTGRES_DB: pipai_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Temporal Server for workflow orchestration
  temporal:
    image: temporalio/auto-setup:1.20
    restart: unless-stopped
    ports:
      - "7233:7233"   # gRPC API
      - "8080:8080"   # Web UI
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=pipai
      - POSTGRES_PWD=pipai_dev_password
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    volumes:
      - ../temporal-config:/etc/temporal/config/dynamicconfig
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "tctl", "--address", "temporal:7233", "workflow", "list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for S3-compatible object storage (local development)
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      MINIO_ROOT_USER: pipai
      MINIO_ROOT_PASSWORD: pipai_dev_password
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailhog for email testing (local development)
  mailhog:
    image: mailhog/mailhog:latest
    restart: unless-stopped
    ports:
      - "1025:1025"   # SMTP
      - "8025:8025"   # Web UI

volumes:
  postgres_data:
  redis_data:
  minio_data:
  node_modules:
  venv: 