name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: "20"
  PNPM_VERSION: "10.12.1"

jobs:
  # Matrix build for code quality checks
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, type-check, test]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 📦 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ${{ matrix.check }}
        run: pnpm run ${{ matrix.check }}

  # Build verification
  build:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 📦 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build all packages
        run: pnpm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            packages/*/dist/
          retention-days: 1

  # Infrastructure deployment with Pulumi
  infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.pulumi.outputs.preview_url }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📦 Install Pulumi SDK dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./infra

      - name: 🏗️ Setup Pulumi
        uses: pulumi/actions@v5

      - name: � Install Pulumi SDK
        working-directory: ./infra
        run: pulumi install
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

      - name: �🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: 🚀 Deploy Infrastructure
        id: pulumi
        working-directory: ./infra
        run: |
          # Set stack name based on branch - using dev stack for now since it has configs
          STACK_NAME="dev"

          echo "Deploying to stack: $STACK_NAME"

          # Select or create stack
          pulumi stack select $STACK_NAME || pulumi stack init $STACK_NAME

          # Configure Upstash credentials if they're provided
          if [ ! -z "$UPSTASH_EMAIL" ] && [ ! -z "$UPSTASH_API_KEY" ]; then
            echo "Setting Upstash configuration..."
            pulumi config set upstash:email "$UPSTASH_EMAIL" --secret
            pulumi config set upstash:apiKey "$UPSTASH_API_KEY" --secret
          fi

          # Configure AWS region
          pulumi config set aws:region "$AWS_REGION"

          # Deploy infrastructure
          pulumi up --yes --non-interactive

          # Export outputs for Vercel
          echo "preview_url=$(pulumi stack output previewUrl || echo 'https://your-app.vercel.app')" >> $GITHUB_OUTPUT
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          VERCEL_API_TOKEN: ${{ secrets.VERCEL_API_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          UPSTASH_EMAIL: ${{ secrets.UPSTASH_EMAIL }}
          UPSTASH_API_KEY: ${{ secrets.UPSTASH_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  # Vercel deployment
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: always() && needs.build.result == 'success'
    permissions:
      contents: read
      pull-requests: write
      issues: write

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      url: ${{ steps.deploy.outputs.preview_url }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📦 Build shared packages
        run: |
          cd packages/shared && pnpm run build
          cd ../ui && pnpm run build

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🚀 Deploy to Vercel
        id: deploy
        run: |
          vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
          vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployment URL: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          # Application environment variables
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          TEMPORAL_NAMESPACE: ${{ secrets.TEMPORAL_NAMESPACE }}
          TEMPORAL_API_KEY: ${{ secrets.TEMPORAL_API_KEY }}
          TEMPORAL_TASK_QUEUE: ${{ secrets.TEMPORAL_TASK_QUEUE }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_TOKEN: ${{ secrets.REDIS_TOKEN }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: 📝 Comment Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Preview Deployment')
            );

            const commentBody = `## 🚀 Preview Deployment

            **✅ Your construction analysis demo is ready!**

            🔗 **Preview URL**: ${{ steps.deploy.outputs.preview-url }}

            ### 🏗️ What's included:
            - ✅ **Construction AI Engine**: PDF analysis with GPT-4o
            - ✅ **Trade Detection**: Identifies 9+ construction trades
            - ✅ **5-Agent Workflow**: Manager → File Reader → Trade Mapper → Estimator → Exporter
            - ✅ **Real-time Progress**: Streaming workflow updates
            - ✅ **Professional UI**: Turbopack-powered frontend

            ### 📋 Test the demo:
            1. Visit the preview URL above
            2. Upload a construction PDF
            3. Watch the agents analyze your document
            4. Download generated estimates and reports

            **Commit**: \`${{ github.sha }}\`
            **Branch**: \`${{ github.head_ref }}\`
            **Build time**: ${{ job.duration }}
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # Cleanup preview environments
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Pulumi
        uses: pulumi/actions@v5

      - name: 🧹 Destroy preview infrastructure
        working-directory: ./infra
        run: |
          STACK_NAME="preview-${{ github.event.number }}"
          pulumi stack select $STACK_NAME || exit 0
          pulumi destroy --yes --non-interactive
          pulumi stack rm $STACK_NAME --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        continue-on-error: true
